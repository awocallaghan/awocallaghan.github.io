---
layout:     post
title:      "Gulp: JavaScript build automation"
subtitle:   "Overview of Gulp.js"
date:       2016-07-16 12:00:00
author:     "Alex O'Callaghan"
header-img: "/img/gulp.png"
preview-img: "/img/gulp_small.png"
description: An overview of the JavaScript automation library Gulp
---
## What is it?

Gulp is a Node npm package that allows for automation of tasks in order to remove common time-consuming processes from developer’s workflow. Gulp is platform independent with plugins/integration available for all popular IDEs,. It runs within the JavaScript runtime environment Node.js allowing for easy use of packages from the npm ecosystem which is the “largest ecosystem of open-source libraries in the world”. Furthermore, there are many open-source packages created for integration with Gulp with the prefix ‘gulp-’.

Common tasks automated with Gulp include concatenation, minification, live reloading page on code changes and running tests/code coverage. Using a build system like Gulp is a must if we want to use more advanced language features which require compiling/transpiling such as SASS/LESS (CSS preprocessors) or TypeScript/Babel/Browserify (JavaScript language extensions). See the full list of [Gulp recipes](https://github.com/gulpjs/gulp/tree/master/docs/recipes#recipes) of use cases with code examples.

## Installation

Gulp requires [installing Node and npm](https://nodejs.org/en/download/). Once installed and the npm command is available in your command line install the Gulp command line interface:

    npm install -g gulp-cli

To install Gulp as a developer dependency within an npm project navigate to the project's root directory and initialise an empty npm 'package.json' file:

    npm init

Then install Gulp as a developer dependency:

    npm install --save-dev gulp


Gulp tasks are contained in a file called `gulpfile.js` located in the root folder of the project. Here is an example with an empty default task:

```javascript
  var gulp = require('gulp');
  gulp.task('default', function() {
    // default task code goes here
  });
```

Finally the default gulp task can be run and nothing will happen:

    gulp

## Tasks

When no task name is given to the gulp command the ‘default’ task is executed. Tasks can also be created with names:

```javascript
  var gulp = require('gulp');

  gulp.task('css', function() {
    // do something to the CSS
  });
```

And executed individually from the command line:

    gulp css

In addition, tasks can depend on other tasks:

```javascript
  var gulp = require('gulp');

  gulp.task('build', ['css', 'js'], function() {
    console.log('Build complete!');
  });

  gulp.task('css', function() {
    // do something to the CSS
  });

  gulp.task('js', function() {
    // do something with the JavaScript
  });
```

## Plugins

The open source plugins for Gulp available are what makes it so powerful. A useful trick for managing loading Gulp plugins is the plugin [gulp-load-plugins](https://www.npmjs.com/package/gulp-load-plugins).

    npm install --save-dev gulp-load-plugins

Then you can add the following to your gulpfile.js:

```javascript
  var gulp = require('gulp');
  var gulpLoadPlugins = require('gulp-load-plugins');
  var plugins = gulpLoadPlugins();
```

The plugins object will now contain all Gulp plugins which are installed as dev dependencies in your ‘package.json’ (ie. all ‘--save-dev’ plugins which begin with ‘gulp-’). For example if you had the ‘gulp-concat’ plugin installed for concatenating files, it would be accessible via the `plugins.concat()` function.

## Useful links

- [Gulp.js](http://gulpjs.com)
- [Node.js - JavaScript runtime environment](https://nodejs.org/en/)
- [npm - JavaScript package manager](https://npmjs.com)
- [Gulp in Webstorm 9](https://blog.jetbrains.com/webstorm/2014/11/gulp-in-webstorm-9/)
- [gulp-control - Gulp plugin for Atom](https://atom.io/packages/gulp-control)
- [Gulp packages on npm](https://www.npmjs.com/search?q=gulp)
